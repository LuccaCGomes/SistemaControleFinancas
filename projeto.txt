Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/Category.java
package com.trabalho.controlefinancas.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity
@Table(name = "category")
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column
    private String description;

    @Column
    private BigDecimal budget;

    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Transaction> transactions = new ArrayList<>();

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false) // Relacionamento com a tabela User
    private User user;

    // Default constructor
    public Category() {}

    // Constructor with name
    public Category(String name) {
        this.name = name;
    }

    // Constructor with name and budget
    public Category(String name, BigDecimal budget) {
        this.name = name;
        this.budget = budget;
    }

    // Constructor with name and description
    public Category(String name, String description) {
        this.name = name;
        this.description = description;
    }

    // Constructor with name, description and budget
    public Category(String name, String description, BigDecimal budget) {
        this.name = name;
        this.description = description;
        this.budget = budget;
    }

    // Constructor with name, description, budget and user
    public Category(String name, String description, BigDecimal budget, User user) {
        this.name = name;
        this.description = description;
        this.budget = budget;
        this.user = user;
    }

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public BigDecimal getBudget() {
        return budget;
    }

    public void setBudget(BigDecimal budget) {
        this.budget = budget;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    // Helper method to add a transaction
    public void addTransaction(Transaction transaction) {
        transactions.add(transaction);
        transaction.setCategory(this);
    }

    // Helper method to remove a transaction
    public void removeTransaction(Transaction transaction) {
        transactions.remove(transaction);
        transaction.setCategory(null);
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/UserRole.java
package com.trabalho.controlefinancas.model;

public enum UserRole {
    ROLE_USER,
    ROLE_ADMIN
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/Transaction.java
package com.trabalho.controlefinancas.model;

import java.math.BigDecimal;
import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "transaction")
public class Transaction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    private TransactionType type; // RECEITA ou DESPESA
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal amount;
    @Column(nullable = false)
    private LocalDate date;
    @Column(nullable = false)
    private String description;
    @Column(nullable = false)
    private boolean isRecurring;

    @ManyToOne
    private User user;

    public Transaction() {
    }

    public Transaction(TransactionType type, Category category, BigDecimal amount, LocalDate date, String description, boolean isRecurring, User user) {
        this.type = type;
        this.category = category;
        this.amount = amount;
        this.date = date;
        this.description = description;
        this.isRecurring = isRecurring;
        this.user = user;
    }

    // Getters e Setters

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public TransactionType getType() {
        return type;
    }

    public void setType(TransactionType type) {
        this.type = type;
    }

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public boolean isRecurring() {
        return isRecurring;
    }

    public String isRecurringString(){
        if (isRecurring()){
            return  "Sim";
        }
        return "NÃ£o";
    }

    public void setRecurring(boolean isRecurring) {
        this.isRecurring = isRecurring;
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/FinancialGoal.java
package com.trabalho.controlefinancas.model;

import java.math.BigDecimal;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "financial_goal")
public class FinancialGoal {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String description;

    @Column(nullable = false)
    private BigDecimal targetAmount;

    @Column(nullable = false)
    private boolean achieved;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    // Getters e Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public BigDecimal getTargetAmount() {
        return targetAmount;
    }

    public void setTargetAmount(BigDecimal targetAmount) {
        this.targetAmount = targetAmount;
    }

    public boolean isAchieved() {
        return achieved;
    }

    public void setAchieved(boolean achieved) {
        this.achieved = achieved;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/TransactionType.java
package com.trabalho.controlefinancas.model;

public enum TransactionType {
    RECEITA,
    DESPESA
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/model/User.java
package com.trabalho.controlefinancas.model;

import java.util.Collection;
import java.util.Collections;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "app_user")
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;

    @Enumerated(EnumType.STRING)
    private UserRole role = UserRole.ROLE_USER;

    private boolean enabled = true;

    public User() {
    }

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority = new SimpleGrantedAuthority(role.name());
        return Collections.singletonList(authority);
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    // Standard getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public UserRole getRole() {
        return role;
    }

    public void setRole(UserRole role) {
        this.role = role;
    }

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/config/SecurityConfig.java
package com.trabalho.controlefinancas.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf
                .ignoringRequestMatchers(new AntPathRequestMatcher("/h2-console/**"))
                )
                .headers(headers -> headers
                .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin)
                )
                .authorizeHttpRequests(auth -> auth
                .requestMatchers("/", "/register", "/login", "/css/**", "/js/**").permitAll()
                .requestMatchers("/h2-console/**").permitAll()
                .requestMatchers("/add-goal").authenticated() // Exige autenticaÃ§Ã£o para /add-goal
                .anyRequest().authenticated()
                )
                .formLogin(form -> form
                .loginPage("/login")
                .defaultSuccessUrl("/transactions", true)
                .permitAll()
                )
                .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/")
                .invalidateHttpSession(true)
                .permitAll()
                );

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/ChartController.java
package com.trabalho.controlefinancas.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;

import org.springframework.http.MediaType;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;

import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.ChartService;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ChartController {

    private final ChartService chartService;

    // Constructor injection
    public ChartController(ChartService chartService) {
        this.chartService = chartService;
    }

    @GetMapping(value = "/simple-chart", produces = MediaType.IMAGE_PNG_VALUE)
    public byte[] getExpenseChart(@AuthenticationPrincipal User user) throws IOException {

        JFreeChart chart = chartService.createExpensePieChart(user);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ChartUtils.writeChartAsPNG(baos, chart, 600, 400);

        return baos.toByteArray();
    }

    @GetMapping(value = "/cash-flow-chart", produces = MediaType.IMAGE_PNG_VALUE)
    public byte[] getCashFlowChart(@AuthenticationPrincipal User user) throws IOException {
        JFreeChart chart = chartService.createCashFlowChart(user);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ChartUtils.writeChartAsPNG(baos, chart, 600, 400);

        return baos.toByteArray();
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/ResumeController.java
package com.trabalho.controlefinancas.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.trabalho.controlefinancas.model.FinancialGoal;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.FinancialGoalService;
import com.trabalho.controlefinancas.service.TransactionService;

@Controller
public class ResumeController {

    private final TransactionService transactionService;
    private final FinancialGoalService financialGoalService;

    // Constructor injection
    public ResumeController(TransactionService transactionService, FinancialGoalService financialGoalService) {
        this.transactionService = transactionService;
        this.financialGoalService = financialGoalService;
    }

    @GetMapping("/monitoring")
    public String getResumoFinanceiro(@AuthenticationPrincipal User user, Model model) {
        LocalDate currentDate = LocalDate.now();
        int month = currentDate.getMonthValue();
        int year = currentDate.getYear();

        Map<String, BigDecimal> summary = transactionService.getMonthlyFinancialSummary(user, month, year);
        BigDecimal finalBalance = summary.get("finalBalance");

        // Verificar metas com base no saldo final
        financialGoalService.checkGoals(user, finalBalance);

        List<FinancialGoal> goals = financialGoalService.getUserGoals(user);

        model.addAttribute("initialBalance", summary.get("initialBalance"));
        model.addAttribute("totalIncome", summary.get("totalIncome"));
        model.addAttribute("totalExpense", summary.get("totalExpense"));
        model.addAttribute("finalBalance", finalBalance);
        model.addAttribute("goals", goals);

        return "monitoring";
    }

    @PostMapping("/add-goal")
    public String addGoal(
            @RequestParam String description,
            @RequestParam BigDecimal targetAmount,
            @AuthenticationPrincipal User user) {

        FinancialGoal goal = new FinancialGoal();
        goal.setDescription(description);
        goal.setTargetAmount(targetAmount);
        goal.setAchieved(false);
        goal.setUser(user);
        financialGoalService.addFinancialGoal(goal);

        return "redirect:/monitoring";
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/UserController.java
package com.trabalho.controlefinancas.controller;

import java.math.BigDecimal;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.CategoryService;
import com.trabalho.controlefinancas.service.UserService;

@Controller
public class UserController {

    private final UserService userService;
    private final CategoryService categoryService;

    // Constructor Injection
    public UserController(UserService userService, CategoryService categoryService) {
        this.userService = userService;
        this.categoryService = categoryService;
    }
    @GetMapping("/loggedin")
    public String loggedin() {
        return "loggedin";
    }

    @GetMapping("/")
    public String home() {
        return "home";
    }

    @GetMapping("/register")
    public String showRegistrationForm() {
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@RequestParam String username, @RequestParam String password, Model model, RedirectAttributes redirectAttributes) {
        try {
            userService.registerUser(username, password);
            //Divida TÃªcnica para inicialiar categoria padrÃ£o.
            User user = userService.findUserByUsername(username);
            Category baseCategory1 = new Category("AlimentaÃ§Ã£o", "Gastos com Alimentos");
            baseCategory1.setUser(user);
            categoryService.addCategory(baseCategory1);
            Category baseCategory2 = new Category("Transporte", BigDecimal.valueOf(1000));
            baseCategory2.setUser(user);
            categoryService.addCategory(baseCategory2);
            Category baseCategory3 = new Category("SaÃºde", "Gastos com SaÃºde", BigDecimal.valueOf(1500));
            baseCategory3.setUser(user);
            categoryService.addCategory(baseCategory3);
            Category baseCategory4 = new Category("SalÃ¡rio");
            baseCategory4.setUser(user);
            categoryService.addCategory(baseCategory4);
            //termina a dÃ­vida tecnica
            redirectAttributes.addFlashAttribute("successMessage", "Cadastro concluÃ­do! FaÃ§a login.");
            return "redirect:/login";
        } catch (RuntimeException e) {
            model.addAttribute("error", "Nome de usuÃ¡rio jÃ¡ existe. Por favor escolha um outro nome de usuÃ¡rio.");
            return "register";
        }
    }

    @GetMapping("/login")
    public String showLoginForm() {
        return "login";
    }

    @PostMapping("/login")
    public String loginUser(@RequestParam String username, @RequestParam String password, Model model) {
        if (userService.loginUser(username, password)) {
            model.addAttribute("username", username);
            model.addAttribute("message", "UsuÃ¡rio logado com sucesso!");
            return "loggedin";
        } else {
            model.addAttribute("errorMessage", "UsuÃ¡rio ou senha invÃ¡lidos");
            return "login";
        }
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/ExportController.java
package com.trabalho.controlefinancas.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.CategoryRepository;
import com.trabalho.controlefinancas.service.ChartService;
import com.trabalho.controlefinancas.service.CsvService;
import com.trabalho.controlefinancas.service.PdfExportService;
import com.trabalho.controlefinancas.service.ThymeleafTemplateService;
import com.trabalho.controlefinancas.service.TransactionService;

@Controller
public class ExportController {

    private final PdfExportService pdfExportService;
    private final ChartService chartService;
    private final ThymeleafTemplateService templateService;
    private final CategoryRepository categoryRepository;
    private final TransactionService transactionService;
    private final CsvService csvService;

    // Constructor injection
    public ExportController(PdfExportService pdfExportService,
                            ChartService chartService,
                            ThymeleafTemplateService templateService,
                            CategoryRepository categoryRepository,
                            TransactionService transactionService,
                            CsvService csvService) {
        this.pdfExportService = pdfExportService;
        this.chartService = chartService;
        this.templateService = templateService;
        this.categoryRepository = categoryRepository;
        this.transactionService = transactionService;
        this.csvService = csvService;
    }

    @GetMapping("/export-pdf")
    public ResponseEntity<byte[]> exportPageToPdf(Model model, @AuthenticationPrincipal User user) throws IOException {
        LocalDate currentDate = LocalDate.now();
        int month = currentDate.getMonthValue();
        int year = currentDate.getYear();

        List<Transaction> transactions = transactionService.findByMonth(year, month, user);

        Map<String, BigDecimal> summary = transactionService.getMonthlyFinancialSummary(user, month, year);

        BigDecimal totalValue = transactions.stream()
                .map(Transaction::getAmount) // Assuming `getAmount()` returns BigDecimal
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        List<Category> categories = categoryRepository.findByUser(user);

        Map<String, Object> variables = new HashMap<>();
        variables.put("transactions", transactions);
        variables.put("categories", categories);
        variables.put("initialBalance", summary.get("initialBalance"));
        variables.put("totalIncome", summary.get("totalIncome"));
        variables.put("totalExpense", summary.get("totalExpense"));
        variables.put("finalBalance", summary.get("finalBalance"));

        String htmlContent = templateService.renderTemplate("report", variables);
        String pieChart = chartService.createExpensePieChartBase64(user);
        String cashFlowChart = chartService.createCashFlowChartBase64(user);
        htmlContent = pdfExportService.prepareHtmlWithChart(htmlContent, pieChart, cashFlowChart);

        byte[] pdfBytes = pdfExportService.generatePdf(htmlContent);

        return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=relatorio.pdf")
                .contentType(org.springframework.http.MediaType.APPLICATION_PDF)
                .body(pdfBytes);
    }

    @GetMapping("/export-csv")
    public ResponseEntity<byte[]> exportDataToCsv(Model model, @AuthenticationPrincipal User user) {

        List<Transaction> transactions = transactionService.getUserTransactions(user);

        List<String[]> data = new ArrayList<>();
        data.add(new String[]{"ID", "Tipo", "DescriÃ§Ã£o", "Valor", "Data", "Categoria", "Ã Recorrente?"});

        // Converter cada transaÃ§Ã£o em uma linha CSV
        for (Transaction transaction : transactions) {
            data.add(new String[]{
                transaction.getId().toString(),
                transaction.getType().toString(),
                transaction.getDescription(),
                String.valueOf(transaction.getAmount()),
                transaction.getDate().toString(),
                transaction.getCategory().getName(),
                transaction.isRecurringString()
            });
        }
        byte[] csvBytes = csvService.generateCsv(data);

        return ResponseEntity.ok()
                .header("Content-Disposition", "attachment; filename=transacoes.csv")
                .contentType(org.springframework.http.MediaType.TEXT_PLAIN)
                .body(csvBytes);
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/CategoryController.java
package com.trabalho.controlefinancas.controller;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.CategoryService;

@Controller
public class CategoryController {

    private static final String REDIRECT_CATEGORIES = "redirect:/categories";
    private static final String REDIRECT_LOGIN = "redirect:/login";
    private static final String REDIRECT_ADD_CATEGORY = "redirect:/add-category";


    private final CategoryService categoryService;

    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }

    @GetMapping("/add-category")
    public String showAddCategoryForm() {
        return "add-category";
    }

    @GetMapping("/categories")
    public String showCategories(Model model, @AuthenticationPrincipal User user) {
        if (user == null) {
            // Caso o usuÃ¡rio nÃ£o esteja logado, redireciona para a pÃ¡gina de login
            return REDIRECT_LOGIN;
        }
        List<Category> categories = categoryService.getAllCategoriesByUser(user);
        model.addAttribute("categories", categories);
        return "categories";  // Nome da view que serÃ¡ renderizada
    }

    @PostMapping("/add-category")
    public String addCategory(@RequestParam String name,
            @RequestParam(required = false) String description,
            @RequestParam(required = false) BigDecimal budget,
            @AuthenticationPrincipal User user,
            RedirectAttributes redirectAttributes) {
        if (user == null) {
            // Se o usuÃ¡rio nÃ£o estiver autenticado, redireciona para a pÃ¡gina de login
            redirectAttributes.addFlashAttribute("error", "User is not authenticated.");
            return REDIRECT_LOGIN;  // Direciona para pÃ¡gina de login
        }
        try {
            Category category = new Category(name, description, budget);
            category.setUser(user);
            categoryService.addCategory(category);
            redirectAttributes.addFlashAttribute("message", "Category successfully added!");
            return REDIRECT_CATEGORIES;
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error adding category. The name might already exist.");
            return REDIRECT_ADD_CATEGORY;
        }
    }

    @PostMapping("/delete-category/{id}")
    public String deleteCategory(@PathVariable Long id, Authentication authentication) {
        categoryService.deleteCategoryById(id);
        return REDIRECT_CATEGORIES;
    }

    @PostMapping("/edit-category")
    public String editCategory(
            @RequestParam Long id,
            @RequestParam String name,
            @RequestParam(required = false) BigDecimal budget,
            @RequestParam(required = false) String description,
            RedirectAttributes redirectAttributes) {
        Category category = categoryService.findById(id);
        category.setName(name);
        category.setBudget(budget);
        category.setDescription(description);
        categoryService.updateCategory(category);

        redirectAttributes.addFlashAttribute("message", "Categoria editada com sucesso!");
        return REDIRECT_CATEGORIES;
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/TransactionController.java
package com.trabalho.controlefinancas.controller;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.trabalho.controlefinancas.exception.BudgetExceededException;
import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.CategoryRepository;
import com.trabalho.controlefinancas.service.TransactionService;

@Controller
public class TransactionController {

    private final TransactionService transactionService;
    private final CategoryRepository categoryRepository;

    // Constructor injection
    public TransactionController(TransactionService transactionService, CategoryRepository categoryRepository) {
        this.transactionService = transactionService;
        this.categoryRepository = categoryRepository;
    }

    @GetMapping("/transactions")
    public String showTransactions(Model model, @AuthenticationPrincipal User user) {
        List<Transaction> transactions = transactionService.getUserTransactions(user);

        BigDecimal totalValue = transactions.stream()
                .map(Transaction::getAmount) // Assuming `getAmount()` returns BigDecimal
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        List<Category> categories = categoryRepository.findByUser(user);
        model.addAttribute("categories", categories);
        model.addAttribute("totalValue", totalValue);
        model.addAttribute("transactions", transactions);
        return "transactions";
    }

    @GetMapping("/add-transaction")
    public String showAddTransactionForm(Model model ,@AuthenticationPrincipal User user) {
        List<Category> categories = categoryRepository.findByUser(user);
        model.addAttribute("categories", categories);
        return "add-transaction";
    }

    @PostMapping("/add-transaction")
    public String addTransaction(
            @RequestParam String type,
            @RequestParam Category category,
            @RequestParam BigDecimal amount,
            @RequestParam String date,
            @RequestParam String description,
            @RequestParam(defaultValue = "false") boolean isRecurring,
            @AuthenticationPrincipal User user,
            RedirectAttributes redirectAttributes
            ) {

        Transaction transaction = new Transaction(
                TransactionType.valueOf(type.toUpperCase()),
                category,
                amount,
                LocalDate.parse(date),
                description,
                isRecurring,
                user
        );

        try {
            String errorMessage = transactionService.addTransaction(transaction);
            if (errorMessage != null) {
                redirectAttributes.addFlashAttribute("error", errorMessage);
                return "redirect:/transactions";
            } else {
                redirectAttributes.addFlashAttribute("message", "TransaÃ§Ã£o adicionada com sucesso!");
                return "redirect:/transactions";
            }
        } catch (BudgetExceededException e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/transactions";
        }
    }

    @PostMapping("/delete-transaction/{id}")
    public String deleteTransaction(@PathVariable Long id, @AuthenticationPrincipal User user) {
        transactionService.deleteTransactionByIdAndUser(id, user);
        return "redirect:/transactions";
    }

    @PostMapping("/edit-transaction")
    public String editTransaction(
            @RequestParam String type,
            @RequestParam Long id,
            @RequestParam Long category,
            @RequestParam String date,
            @RequestParam String description,
            @RequestParam BigDecimal amount,
            RedirectAttributes redirectAttributes) {

        Transaction transaction = transactionService.findById(id);
        transaction.setType(TransactionType.valueOf(type.toUpperCase()));
        transaction.setDate(LocalDate.parse(date));
        transaction.setDescription(description);
        transaction.setCategory(categoryRepository.findById(category).orElseThrow(() -> new IllegalArgumentException("Categoria nÃ£o encontrada")));
        transaction.setAmount(amount);

        transactionService.updateTransaction(transaction);

        redirectAttributes.addFlashAttribute("message", "TransaÃ§Ã£o editada com sucesso!");
        return "redirect:/transactions";
    }
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/controller/ImportController.java
package com.trabalho.controlefinancas.controller;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.CsvService;

@Controller
public class ImportController {

    private final CsvService csvService;

    // Constructor injection
    public ImportController(CsvService csvService) {
        this.csvService = csvService;
    }

    @PostMapping("/import-csv")
    public String importCSV(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes, @AuthenticationPrincipal User user) {
        if (file.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "Por favor, envie um arquivo vÃ¡lido.");
            return "redirect:/categories"; // Redirecione para a pÃ¡gina adequada
        }

        try {
            // Processar o arquivo CSV
            csvService.processCSV(file, user);

            redirectAttributes.addFlashAttribute("message", "Arquivo CSV importado com sucesso!");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Erro ao importar o arquivo: " + e.getMessage());
        }

        return "redirect:/transactions";
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/ControleFinancasApplication.java
package com.trabalho.controlefinancas;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ControleFinancasApplication {
    /**
     * MÃ©todo principal que inicia a aplicaÃ§Ã£o.
     *
     */

    public static void main(String[] args) {
        SpringApplication.run(ControleFinancasApplication.class, args);
    }
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/initializer/DataInitializer.java
//package com.trabalho.controlefinancas.initializer;
//
//import com.trabalho.controlefinancas.model.Category;
//import com.trabalho.controlefinancas.repository.CategoryRepository;
//import org.springframework.boot.ApplicationArguments;
//import org.springframework.boot.ApplicationRunner;
//import org.springframework.stereotype.Component;
//
//import java.math.BigDecimal;
//
//@Component
//public class DataInitializer implements ApplicationRunner {
//    private final CategoryRepository repository;
//
////    public DataInitializer(CategoryRepository repository) {
////        this.repository = repository;
////    }
////    @Override
////    public void run(ApplicationArguments args) throws Exception {
////        if (repository.count() == 0) { // Check if data already exists
////            repository.save(new Category("AlimentaÃ§Ã£o", "Gastos com Alimentos")); // Add your default data
////            repository.save(new Category("Transporte", BigDecimal.valueOf(1000))); // Add your default data
////            repository.save(new Category("SaÃºde", "Gastos com SaÃºde", BigDecimal.valueOf(1500))); // Add your default data
////            repository.save(new Category("SalÃ¡rio")); // Add your default data
////
////            // add more as needed
////        }
////    }
//}




Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/ChartService.java
package com.trabalho.controlefinancas.service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.Base64;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.springframework.stereotype.Service;

import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;

@Service
public class ChartService {

    private final TransactionService transactionService;

    // Construtor para injeÃ§Ã£o de dependÃªncia
    public ChartService(TransactionService transactionService) {
        this.transactionService = transactionService;
    }

    public JFreeChart createExpensePieChart(User user) {
        List<Transaction> transactions = transactionService.getUserTransactions(user);

        // Utiliza um Map temporÃ¡rio para acumular os valores das categorias
        Map<String, Double> tempCategoryAmounts = new HashMap<>();

        transactions.stream()
                .filter(transaction -> transaction.getType() == TransactionType.DESPESA)
                .forEach(transaction -> {
                    String categoryName = transaction.getCategory().getName();
                    BigDecimal amount = transaction.getAmount();

                    // Se jÃ¡ existe um valor para a categoria, soma o valor da transaÃ§Ã£o
                    double currentAmount = tempCategoryAmounts.getOrDefault(categoryName, 0.0);
                    tempCategoryAmounts.put(categoryName, currentAmount + amount.doubleValue());
                });

        // Cria o dataset final usando os valores acumulados no Map
        DefaultPieDataset dataset = new DefaultPieDataset();
        tempCategoryAmounts.forEach((category, totalAmount) -> {
            dataset.setValue(category, totalAmount);
        });

        // Cria o grÃ¡fico de pizza com os dados do dataset
        JFreeChart chart = ChartFactory.createPieChart(
                "DistribuiÃ§Ã£o de Despesas", // TÃ­tulo
                dataset,                   // Dataset
                true,                       // Legenda visÃ­vel
                true,                       // Tooltips ativados
                false                       // URLs desativadas
        );

        // Ajusta o grÃ¡fico (exemplo: remove contornos das fatias)
        PiePlot plot = (PiePlot) chart.getPlot();
        plot.setSectionOutlinesVisible(false);

        return chart; // Retorna o grÃ¡fico gerado
    }

    public String createExpensePieChartBase64(User user) throws IOException {
        JFreeChart chart =createExpensePieChart(user);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ChartUtils.writeChartAsPNG(baos, chart, 600, 400);
        return "data:image/png;base64," + Base64.getEncoder().encodeToString(baos.toByteArray());
    }

    public JFreeChart createCashFlowChart(User user) {
        List<Transaction> transactions = transactionService.getUserTransactions(user);

        // Ordenar transaÃ§Ãµes por data
        transactions.sort(Comparator.comparing(Transaction::getDate));

        // Cria a sÃ©rie de dados para o grÃ¡fico
        TimeSeries series = new TimeSeries("Saldo Acumulado");
        BigDecimal saldoAcumulado = BigDecimal.ZERO;

        for (Transaction transaction : transactions) {
            BigDecimal valor = transaction.getType() == TransactionType.RECEITA
                    ? transaction.getAmount()
                    : transaction.getAmount().negate();
            saldoAcumulado = saldoAcumulado.add(valor);

            // Adiciona o saldo acumulado Ã  sÃ©rie
            Date date = Date.from(transaction.getDate().atStartOfDay(ZoneId.systemDefault()).toInstant());
            series.addOrUpdate(new Day(date), saldoAcumulado.doubleValue());
        }

        // Adiciona a sÃ©rie ao conjunto de dados
        TimeSeriesCollection dataset = new TimeSeriesCollection(series);

        // Configura o grÃ¡fico
        XYPlot plot = new XYPlot(
                dataset,
                new DateAxis("Data"),
                new NumberAxis("Saldo Acumulado"),
                new XYLineAndShapeRenderer(true, false)
        );

        return new JFreeChart("Fluxo de Caixa", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
    }

    public String createCashFlowChartBase64(User user) throws IOException {
        JFreeChart chart =createCashFlowChart(user);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ChartUtils.writeChartAsPNG(baos, chart, 600, 400);
        return "data:image/png;base64," + Base64.getEncoder().encodeToString(baos.toByteArray());
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/FinancialGoalService.java
package com.trabalho.controlefinancas.service;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.stereotype.Service;

import com.trabalho.controlefinancas.model.FinancialGoal;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.FinancialGoalRepository;

@Service
public class FinancialGoalService {

    private final FinancialGoalRepository financialGoalRepository;

    // Construtor para injeÃ§Ã£o de dependÃªncia
    public FinancialGoalService(FinancialGoalRepository financialGoalRepository) {
        this.financialGoalRepository = financialGoalRepository;
    }

    public void addFinancialGoal(FinancialGoal goal) {
        financialGoalRepository.save(goal);
    }

    public List<FinancialGoal> getUserGoals(User user) {
        return financialGoalRepository.findByUser(user);
    }

    public void checkGoals(User user, BigDecimal currentBalance) {
        List<FinancialGoal> goals = financialGoalRepository.findByUser(user);
        for (FinancialGoal goal : goals) {
            if (!goal.isAchieved() && currentBalance.compareTo(goal.getTargetAmount()) >= 0) {
                goal.setAchieved(true);
                financialGoalRepository.save(goal);
            }
        }
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/CsvService.java
package com.trabalho.controlefinancas.service;
import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.time.LocalDate;
import java.io.OutputStreamWriter;
import java.util.List;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.util.ArrayList;

import static java.lang.Long.parseLong;

@Service
public class CsvService {
    private final CategoryService categoryService;
    private final TransactionService transactionService;

    // InjeÃ§Ã£o de dependÃªncia via construtor
    public CsvService(CategoryService categoryService, TransactionService transactionService) {
        this.categoryService = categoryService;
        this.transactionService = transactionService;
    }


    public byte[] generateCsv(List<String[]> data) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             OutputStreamWriter writer = new OutputStreamWriter(outputStream);
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {

            for (String[] record : data) {
                csvPrinter.printRecord(record);
            }

            csvPrinter.flush();
            return outputStream.toByteArray();
        } catch (Exception e) {
            throw new RuntimeException("Error generating CSV", e);
        }
    }

    public void processCSV(MultipartFile file, User user) throws Exception {


        List<Transaction> transactions = new ArrayList<>();

        try (Reader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
            Iterable<CSVRecord> records = CSVFormat.DEFAULT
                    .withHeader("ID", "Tipo", "DescriÃ§Ã£o", "Valor", "Data", "Categoria", "Ã Recorrente?")
                    .withFirstRecordAsHeader()
                    .parse(reader);

            for (CSVRecord record : records) {
                String id = record.get("ID");
                String type = record.get("Tipo");
                String description = record.get("DescriÃ§Ã£o");
                String amount = record.get("Valor");
                String date = record.get("Data");
                String categoryName = record.get("Categoria");
                String isRecurring = record.get("Ã Recorrente?");

                LocalDate localDate = null;
                try {
                    if (date != null && !date.isEmpty()) {
                        localDate = LocalDate.parse(date); // Formato esperado: YYYY-MM-DD
                    }
                } catch (Exception e) {
                    throw new IllegalArgumentException("Formato de data invÃ¡lido na linha: " + record.getRecordNumber());
                }
                // Construa a entidade
                Transaction transaction = new Transaction();

                Category category = categoryService.findByNameAndUser(categoryName, user);

                transaction.setType(type.equals("RECEITA") ? TransactionType.RECEITA: TransactionType.DESPESA);
                transaction.setAmount(amount.isEmpty() ? null : new BigDecimal(amount));
                transaction.setDescription(description);
                transaction.setDate(localDate);
                transaction.setCategory(category);
                transaction.setRecurring(isRecurring.equals("Sim"));
                transaction.setUser(user);

                transactions.add(transaction);
            }
        }

        for (Transaction transaction:transactions) {
            transactionService.addTransaction(transaction);

        }
    }

}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/ThymeleafTemplateService.java
package com.trabalho.controlefinancas.service;

import java.util.Map;

import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

@Service
public class ThymeleafTemplateService {

    private final TemplateEngine templateEngine;

    public ThymeleafTemplateService(TemplateEngine templateEngine) {
        this.templateEngine = templateEngine;
    }

    public String renderTemplate(String templateName, Map<String, Object> variables) {
        Context context = new Context();
        context.setVariables(variables);
        return templateEngine.process(templateName, context);
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/UserService.java
package com.trabalho.controlefinancas.service;

import java.util.Optional;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.UserRepository;

@Service
public class UserService implements UserDetailsService{

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    // Construtor para injeÃ§Ã£o de dependÃªncia
    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public void registerUser(String username, String password) {
        User user = new User(username,password);
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            throw new RuntimeException("Username already exists");
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
    }


    public User findUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Username doesn't exist"));
    }
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("UsuÃ¡rio de nome \""+username+ "\" nÃ£o foi achado"));
    }

    public boolean loginUser(String username, String password) {
        Optional<User> user = userRepository.findByUsername(username);
        return user.isPresent() && user.get().getPassword().equals(password);
    }
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/TransactionService.java
package com.trabalho.controlefinancas.service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.TransactionRepository;

@Service
public class TransactionService {

    private final TransactionRepository transactionRepository;

    // Construtor para injeÃ§Ã£o de dependÃªncia
    public TransactionService(TransactionRepository transactionRepository) {
        this.transactionRepository = transactionRepository;
    }

    public List<Transaction> getUserTransactions(User user) {
        return transactionRepository.findByUser(user);
    }

    public String addTransaction(Transaction transaction) {
        Category category = transaction.getCategory();
        User user = transaction.getUser();

        // ObtÃ©m o mÃªs e o ano da transaÃ§Ã£o
        LocalDate transactionDate = transaction.getDate();
        int month = transactionDate.getMonthValue();
        int year = transactionDate.getYear();


        // Salva a transaÃ§Ã£o mesmo se exceder o limite do mÃªs
        transactionRepository.save(transaction);

        if (transaction.getType() == TransactionType.RECEITA || category.getBudget() == null) {
            return null;
        }
        // se for Receita ou budget nÃ£o existir
        // o limite do mÃªs nÃ£o precisa ser calculado


        BigDecimal totalTransactionsAmount = transactionRepository
                .findByCategoryAndUser(category, user)
                .stream()
                .filter(t -> t.getDate().getMonthValue() == month
                        && t.getDate().getYear() == year
                        && t.getType() == TransactionType.DESPESA
                ) // Verifica o mesmo mÃªs, ano e se Ã© uma Despesa
                .map(Transaction::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal newTotal = totalTransactionsAmount.add(transaction.getAmount());



        if (newTotal.compareTo(category.getBudget()) > 0) {

            return "O valor das transaÃ§Ãµes para a categoria " + category.getName() + " excedeu o orÃ§amento mensal.";
        }

        return null;
    }


    public void deleteTransactionByIdAndUser(Long id, User user) {
        Transaction transaction = transactionRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Transaction not found"));

        if (!transaction.getUser()
                .getId()
                .equals(user.getId())) {
            throw new AccessDeniedException("Not authorized to delete this transaction");
        }

        transactionRepository.delete(transaction);
    }

    public Map<String, BigDecimal> getMonthlyFinancialSummary(User user, int month, int year) {
        List<Transaction> transactions = transactionRepository.findByUser(user);

        // Calcular o saldo inicial (todas as receitas - despesas atÃ© o Ãºltimo dia do mÃªs anterior)
        BigDecimal initialBalance = transactions.stream()
                .filter(t -> t.getDate().isBefore(LocalDate.of(year, month, 1)))
                .map(t -> t.getType() == TransactionType.RECEITA ? t.getAmount() : t.getAmount().negate())
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalIncome = transactions.stream()
                .filter(t -> t.getType() == TransactionType.RECEITA &&
                        t.getDate().getMonthValue() == month &&
                        t.getDate().getYear() == year)
                .map(Transaction::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalExpense = transactions.stream()
                .filter(t -> t.getType() == TransactionType.DESPESA &&
                        t.getDate().getMonthValue() == month &&
                        t.getDate().getYear() == year)
                .map(Transaction::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal finalBalance = initialBalance.add(totalIncome).subtract(totalExpense);

        Map<String, BigDecimal> summary = new HashMap<>();
        summary.put("initialBalance", initialBalance);
        summary.put("totalIncome", totalIncome);
        summary.put("totalExpense", totalExpense);
        summary.put("finalBalance", finalBalance);

        return summary;
    }

    /**
     * Busca uma transaÃ§Ã£o pelo ID.
     *
     * @param id O ID da transaÃ§Ã£o.
     * @return A transaÃ§Ã£o correspondente.
     * @throws IllegalArgumentException Se a transaÃ§Ã£o nÃ£o for encontrada.
     */
    public Transaction findById(Long id) {
        return transactionRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("TransaÃ§Ã£o nÃ£o encontrada com o ID: " + id));
    }

    /**
     * Atualiza os dados de uma transaÃ§Ã£o existente.
     *
     * @param transaction A transaÃ§Ã£o com os novos dados.
     * @throws IllegalArgumentException Se a transaÃ§Ã£o nÃ£o for encontrada.
     */
    public void updateTransaction(Transaction transaction) {
        if (!transactionRepository.existsById(transaction.getId())) {
            throw new IllegalArgumentException("TransaÃ§Ã£o nÃ£o encontrada com o ID: " + transaction.getId());
        }
        transactionRepository.save(transaction);
    }

    public List<Transaction> findByMonth(int year, int month, User user){
        return transactionRepository.findTransactionsByMonthAndUser(year, month, user);
    }
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/PdfExportService.java
package com.trabalho.controlefinancas.service;
import java.io.ByteArrayOutputStream;

import org.springframework.stereotype.Service;
import org.xhtmlrenderer.pdf.ITextRenderer;

@Service
public class PdfExportService {

    public byte[] generatePdf(String htmlContent) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            ITextRenderer renderer = new ITextRenderer();
            renderer.setDocumentFromString(htmlContent);
            renderer.layout();
            renderer.createPDF(outputStream);
            return outputStream.toByteArray();
        } catch (Exception e) {
            throw new RuntimeException("Error generating PDF", e);
        }
    }

    public String prepareHtmlWithChart(String htmlTemplate, String chartPieBase64, String chartCashFlowBase64) {
        // Substituir o marcador ${graficoBase64} pelo grÃ¡fico gerado
        return htmlTemplate.replace("${graficoPieBase64}", chartPieBase64)
                .replace("${graficoCashFlowBase64}", chartCashFlowBase64);
    }
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/service/CategoryService.java
package com.trabalho.controlefinancas.service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.CategoryRepository;
import com.trabalho.controlefinancas.repository.UserRepository;

@Service
public class CategoryService {

    private final CategoryRepository categoryRepository;
    private final UserRepository userRepository;

    // InjeÃ§Ã£o de dependÃªncia via construtor
    public CategoryService(CategoryRepository categoryRepository, UserRepository userRepository) {
        this.categoryRepository = categoryRepository;
        this.userRepository = userRepository;
    }

    public void addCategory(Category category) {
        if (category.getUser() != null) {// Associa o usuÃ¡rio Ã  categoria
            categoryRepository.save(category);  // Salva a categoria com o usuÃ¡rio associado
        } else {
            throw new IllegalArgumentException("User cannot be null");
        }
    }
//
//    public List<Category> getAllCategories() {
//        return categoryRepository.findAll();
//    }

    public void deleteCategoryById(Long id){
        Optional<Category> category = categoryRepository.findById(id);
        category.ifPresent(categoryRepository::delete);
    }

    public List<Category> getAllCategoriesByUser(User user) {
        return categoryRepository.findByUser(user);
    }


    /**
     * Verifica se o orÃ§amento da categoria foi excedido.
     *
     * @param user O usuÃ¡rio ao qual a categoria pertence
     * @param categoryId O ID da categoria
     * @return true se o orÃ§amento foi excedido, false caso contrÃ¡rio
     */
    public boolean isBudgetExceededForCategory(User user, Long categoryId) {
        Optional<Category> categoryOpt = categoryRepository.findById(categoryId);
        if (categoryOpt.isPresent()) {
            Category category = categoryOpt.get();
            if (category.getUser().equals(user)) {
                BigDecimal totalExpenses = category.getTransactions().stream()
                        .filter(transaction -> transaction.getType() == TransactionType.DESPESA)
                        .map(Transaction::getAmount)
                        .reduce(BigDecimal.ZERO, BigDecimal::add);
                return totalExpenses.compareTo(category.getBudget()) > 0;
            }
        }
        return false;
    }

    /**
     * Retorna o valor restante do orÃ§amento de uma categoria.
     *
     * @param user O usuÃ¡rio ao qual a categoria pertence
     * @param categoryId O ID da categoria
     * @return O valor restante do orÃ§amento, ou BigDecimal.ZERO se a categoria nÃ£o for encontrada ou o usuÃ¡rio nÃ£o coincidir
     */
    public BigDecimal getRemainingBudgetForCategory(User user, Long categoryId) {
        Optional<Category> categoryOpt = categoryRepository.findById(categoryId);
        if (categoryOpt.isPresent()) {
            Category category = categoryOpt.get();
            if (category.getUser().equals(user)) {
                BigDecimal totalExpenses = category.getTransactions().stream()
                        .filter(transaction -> transaction.getType() == TransactionType.DESPESA)
                        .map(Transaction::getAmount)
                        .reduce(BigDecimal.ZERO, BigDecimal::add);
                return category.getBudget().subtract(totalExpenses);
            }
        }
        return BigDecimal.ZERO;
    }

    /**
     * Busca uma categoria pelo ID.
     *
     * @param id O ID da categoria.
     * @return A categoria correspondente.
     * @throws IllegalArgumentException Se a categoria nÃ£o for encontrada.
     */
    public Category findById(Long id) {
        return categoryRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Categoria nÃ£o encontrada com o ID: " + id));
    }

    /**
     * Atualiza os dados de uma categoria existente.
     *
     * @param category A categoria com os novos dados.
     */
    public void updateCategory(Category category) {
        if (!categoryRepository.existsById(category.getId())) {
            throw new IllegalArgumentException("Categoria nÃ£o encontrada com o ID: " + category.getId());
        }
        categoryRepository.save(category);
    }

    public Category findByNameAndUser(String name, User user) {
        return categoryRepository.findByNameAndUser(name, user)
                .orElseThrow(() -> new IllegalArgumentException("Categoria nÃ£o encontrada com o Nome e User: " + name + " e " + user.getUsername()));
    }
}



Arquivo: ./src/main/java/com/trabalho/controlefinancas/repository/CategoryRepository.java
package com.trabalho.controlefinancas.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.User;

@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {

    List<Category> findByUser(User user);
    Optional<Category> findByNameAndUser(String name, User user);
}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/repository/FinancialGoalRepository.java
package com.trabalho.controlefinancas.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.controlefinancas.model.FinancialGoal;
import com.trabalho.controlefinancas.model.User;

@Repository
public interface FinancialGoalRepository extends JpaRepository<FinancialGoal, Long> {
    List<FinancialGoal> findByUser(User user);
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/repository/UserRepository.java
package com.trabalho.controlefinancas.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.trabalho.controlefinancas.model.User;
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}

Arquivo: ./src/main/java/com/trabalho/controlefinancas/repository/TransactionRepository.java
package com.trabalho.controlefinancas.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.User;


@Repository
public interface TransactionRepository extends JpaRepository<Transaction, Long> {

    //Find Transactions by User
    List<Transaction> findByUser(User user);

    List<Transaction> findByCategoryAndUser(Category category, User user);

    @Query("SELECT t FROM Transaction t WHERE YEAR(t.date) = :year AND MONTH(t.date) = :month AND t.user = :user")
    List<Transaction> findTransactionsByMonthAndUser(@Param("year") int year, @Param("month") int month, @Param("user") User user);

}


Arquivo: ./src/main/java/com/trabalho/controlefinancas/exception/BudgetExceededException.java
package com.trabalho.controlefinancas.exception;

public class BudgetExceededException extends RuntimeException {
    public BudgetExceededException(String message) {
        super(message);
    }
}

Arquivo: ./src/test/java/com/trabalho/controlefinancas/UserServiceTests.java
package com.trabalho.controlefinancas;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.UserRepository;
import com.trabalho.controlefinancas.service.UserService;

class UserServiceTests {

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @InjectMocks
    private UserService userService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void registro_SalvaUserQuantoNaoExiste() {
        String username = "testeUser";
        String password = "testeSenha";

        when(userRepository.findByUsername(username)).thenReturn(Optional.empty());
        when(passwordEncoder.encode(password)).thenReturn("encodedSenha");

        userService.registerUser(username, password);

        verify(userRepository, times(1)).save(any(User.class));
    }

    @Test
    void registro_LancaExcecaoQuandoUserExiste() {
        String username = "userExistente";
        String password = "senhaTeste";

        when(userRepository.findByUsername(username)).thenReturn(Optional.of(new User(username, password)));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            userService.registerUser(username, password);
        });

        assertEquals("Username already exists", exception.getMessage());
        verify(userRepository, never()).save(any(User.class));
    }

//    @Test
//    void findUserByUsername_RetornaUserQuandoExiste() {
//        String username = "userExistente";
//        User mockUser = new User(username, "senhaTeste");
//
//        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));
//
//        User result = userService.findUserByUsername(username);
//
//        assertNotNull(result);
//        assertEquals(username, result.getUsername());
//        verify(userRepository, times(2)).findByUsername(username);
//    }

//    @Test
//    void findUserByUsername_LancaExcecaoQuandoUserNaoExiste() {
//        String username = "userInexistente";
//
//        when(userRepository.findByUsername(username)).thenReturn(Optional.empty());
//
//        Exception exception = assertThrows(RuntimeException.class, () -> {
//            userService.findUserByUsername(username);
//        });
//
//        assertEquals("Username doesn't exists", exception.getMessage());
//    }

    @Test
    void loadUserByUsername_RetornaUserDetailsQuandoExiste() {
        String username = "userExistente";
        User mockUser = new User(username, "senhaTeste");

        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));

        UserDetails result = userService.loadUserByUsername(username);

        assertNotNull(result);
        assertEquals(username, result.getUsername());
    }

    @Test
    void loadUserByUsername_LancaExcecaoQuandoUserNaoExiste() {
        String username = "userInexistente";

        when(userRepository.findByUsername(username)).thenReturn(Optional.empty());

        Exception exception = assertThrows(UsernameNotFoundException.class, () -> {
            userService.loadUserByUsername(username);
        });

        assertEquals("UsuÃ¡rio de nome \"" + username + "\" nÃ£o foi achado", exception.getMessage());
    }

    @Test
    void loginUser_RetornaTrueQuandoUserESenhaDaoMatch() {
        String username = "userValido";
        String password = "senhaTeste";
        User mockUser = new User(username, password);

        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));

        boolean result = userService.loginUser(username, password);

        assertTrue(result);
    }

    @Test
    void loginUser_RetornaFalsaQuandoSenhaErrada() {
        String username = "userValido";
        String password = "senhaErrada";
        User mockUser = new User(username, "senhaCorreta");

        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));

        boolean result = userService.loginUser(username, password);

        assertFalse(result);
    }

    @Test
    void loginUser_RetornaFalsoQuandoUserNaoExiste() {
        String username = "userInexistente";
        String password = "senhaTeste";

        when(userRepository.findByUsername(username)).thenReturn(Optional.empty());

        boolean result = userService.loginUser(username, password);

        assertFalse(result);
    }
}

Arquivo: ./src/test/java/com/trabalho/controlefinancas/CategoryServiceTests.java
package com.trabalho.controlefinancas;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.CategoryRepository;
import com.trabalho.controlefinancas.repository.UserRepository;
import com.trabalho.controlefinancas.service.CategoryService;

class CategoryServiceTests {

    @Mock
    private CategoryRepository categoryRepository;

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private CategoryService categoryService;

    private User user;
    private Category category;
    private Transaction transaction;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        user = new User();
        user.setId(1L);
        user.setUsername("userTest");

        category = new Category();
        category.setId(1L);
        category.setName("categoriaTest");
        category.setBudget(new BigDecimal("1000"));
        category.setUser(user);

        transaction = new Transaction();
        transaction.setId(1L);
        transaction.setType(TransactionType.DESPESA);
        transaction.setAmount(new BigDecimal("500"));

        category.setTransactions(List.of(transaction));
    }

    @Test
    void addCategoria_Sucesso() {
        when(categoryRepository.save(any(Category.class))).thenReturn(category);

        categoryService.addCategory(category);

        verify(categoryRepository, times(1)).save(category);
    }

    @Test
    void addCategoria_LancaExcecaoUserNull() {
        category.setUser(null);

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            categoryService.addCategory(category);
        });

        assertEquals("User cannot be null", exception.getMessage());
    }

    @Test
    void deletaCategoriaPeloId_CatExiste() {
        when(categoryRepository.findById(1L)).thenReturn(Optional.of(category));

        categoryService.deleteCategoryById(1L);

        verify(categoryRepository, times(1)).delete(category);
    }

    @Test
    void deletaCategoriaPeloId_CatNaoExiste() {
        when(categoryRepository.findById(1L)).thenReturn(Optional.empty());

        categoryService.deleteCategoryById(1L);

        verify(categoryRepository, never()).delete(any());
    }

    @Test
    void getCategoriasPeloUser() {
        when(categoryRepository.findByUser(user)).thenReturn(Arrays.asList(category));

        List<Category> categories = categoryService.getAllCategoriesByUser(user);

        assertEquals(1, categories.size());
        assertEquals("categoriaTest", categories.get(0).getName());
        verify(categoryRepository, times(1)).findByUser(user);
    }

    @Test
    void orcamentoExcedeCategoria() {
        when(categoryRepository.findById(1L)).thenReturn(Optional.of(category));

        boolean isExceeded = categoryService.isBudgetExceededForCategory(user, 1L);

        assertFalse(isExceeded); // Total expenses (500) < Budget (1000)
    }

    @Test
    void orcamentoNaoExcedeCategoria() {
        transaction.setAmount(new BigDecimal("1500"));
        category.setTransactions(List.of(transaction));
        when(categoryRepository.findById(1L)).thenReturn(Optional.of(category));

        boolean isExceeded = categoryService.isBudgetExceededForCategory(user, 1L);

        assertTrue(isExceeded); // Total expenses (1500) > Budget (1000)
    }

    @Test
    void getOrcamentoRestanteParaCategoria() {
        when(categoryRepository.findById(1L)).thenReturn(Optional.of(category));

        BigDecimal remainingBudget = categoryService.getRemainingBudgetForCategory(user, 1L);

        assertEquals(new BigDecimal("500"), remainingBudget); // Budget (1000) - Expenses (500)
    }

    @Test
    void getOrcamentoRestanteParaCategoria_CategoriaNotFound() {
        when(categoryRepository.findById(1L)).thenReturn(Optional.empty());

        BigDecimal remainingBudget = categoryService.getRemainingBudgetForCategory(user, 1L);

        assertEquals(BigDecimal.ZERO, remainingBudget);
    }
}



Arquivo: ./src/test/java/com/trabalho/controlefinancas/ChartServiceTests.java
package com.trabalho.controlefinancas;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;

import org.jfree.chart.JFreeChart;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.service.ChartService;
import com.trabalho.controlefinancas.service.TransactionService;


class ChartServiceTests {

    @Mock
    private TransactionService transactionService;

    @InjectMocks
    private ChartService chartService;

    private User user;
    private Category category1;
    private Category category2;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        user = new User();
        user.setId(1L);

        category1 = new Category();
        category1.setName("AlimentaÃ§Ã£o");

        category2 = new Category();
        category2.setName("Transporte");
    }

    @Test
    void criaGraficoTortaDespesas() {
        // Mock de transaÃ§Ãµes
        Transaction transaction1 = new Transaction();
        transaction1.setType(TransactionType.DESPESA);
        transaction1.setCategory(category1);
        transaction1.setAmount(new BigDecimal("100"));

        Transaction transaction2 = new Transaction();
        transaction2.setType(TransactionType.DESPESA);
        transaction2.setCategory(category1);
        transaction2.setAmount(new BigDecimal("50"));

        Transaction transaction3 = new Transaction();
        transaction3.setType(TransactionType.DESPESA);
        transaction3.setCategory(category2);
        transaction3.setAmount(new BigDecimal("30"));

        when(transactionService.getUserTransactions(user)).thenReturn(Arrays.asList(transaction1, transaction2, transaction3));

        JFreeChart chart = chartService.createExpensePieChart(user);

        assertNotNull(chart);
        assertEquals("DistribuiÃ§Ã£o de Despesas", chart.getTitle().getText());
        verify(transactionService, times(1)).getUserTransactions(user);
    }

    @Test
    void criaGraficoFluxo() {
        Transaction transaction1 = new Transaction();
        transaction1.setType(TransactionType.RECEITA);
        transaction1.setAmount(new BigDecimal("500"));
        transaction1.setDate(LocalDate.of(2024, 11, 1));

        Transaction transaction2 = new Transaction();
        transaction2.setType(TransactionType.DESPESA);
        transaction2.setAmount(new BigDecimal("200"));
        transaction2.setDate(LocalDate.of(2024, 11, 5));

        Transaction transaction3 = new Transaction();
        transaction3.setType(TransactionType.RECEITA);
        transaction3.setAmount(new BigDecimal("300"));
        transaction3.setDate(LocalDate.of(2024, 11, 10));

        when(transactionService.getUserTransactions(user)).thenReturn(Arrays.asList(transaction1, transaction2, transaction3));

        JFreeChart chart = chartService.createCashFlowChart(user);

        assertNotNull(chart);
        assertEquals("Fluxo de Caixa", chart.getTitle().getText());
        verify(transactionService, times(1)).getUserTransactions(user);
    }
}


Arquivo: ./src/test/java/com/trabalho/controlefinancas/TransactionModelTests.java
package com.trabalho.controlefinancas;

import java.math.BigDecimal;
import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;

class TransactionModelTests {

    @Test
    void construtorTransacao() {
        Category category = new Category("Food");
        User user = new User();
        LocalDate date = LocalDate.now();
        Transaction transaction = new Transaction(
            TransactionType.RECEITA,
            category,
            BigDecimal.valueOf(100.50),
            date,
            "Salario",
            true,
            user
        );

        assertEquals(TransactionType.RECEITA, transaction.getType());
        assertEquals(category, transaction.getCategory());
        assertEquals(BigDecimal.valueOf(100.50), transaction.getAmount());
        assertEquals(date, transaction.getDate());
        assertEquals("Salario", transaction.getDescription());
        assertTrue(transaction.isRecurring());
        assertEquals(user, transaction.getUser());
    }

    @Test
    void getId() {
        Transaction transaction = new Transaction();
        transaction.setId(1L);
        assertEquals(1L, transaction.getId());
    }

    @Test
    void setGetDescricao() {
        Transaction transaction = new Transaction();
        transaction.setDescription("Grocery shopping");
        assertEquals("Grocery shopping", transaction.getDescription());
    }

    @Test
    void setEIsRecurring() {
        Transaction transaction = new Transaction();
        transaction.setRecurring(true);
        assertTrue(transaction.isRecurring());

        transaction.setRecurring(false);
        assertFalse(transaction.isRecurring());
    }
}



Arquivo: ./src/test/java/com/trabalho/controlefinancas/TransactionServiceTests.java
package com.trabalho.controlefinancas;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.access.AccessDeniedException;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.TransactionType;
import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.repository.TransactionRepository;
import com.trabalho.controlefinancas.service.TransactionService;


@ExtendWith(MockitoExtension.class)
class TransactionServiceTest {

    @Mock
    private TransactionRepository transactionRepository;

    @InjectMocks
    private TransactionService transactionService;

    @Test
    void getTransacoesUser() {
        User user = new User();
        Transaction transaction1 = new Transaction();
        Transaction transaction2 = new Transaction();
        List<Transaction> transactions = List.of(transaction1, transaction2);

        when(transactionRepository.findByUser(user)).thenReturn(transactions);

        List<Transaction> result = transactionService.getUserTransactions(user);

        assertEquals(2, result.size());
        verify(transactionRepository, times(1)).findByUser(user);
    }

    @Test
    void addTransacaoDentroOrcamento() {
        User user = new User();
        Category category = new Category();
        category.setBudget(new BigDecimal("500"));
        category.setName("Food");

        Transaction transaction = new Transaction();
        transaction.setUser(user);
        transaction.setCategory(category);
        transaction.setAmount(new BigDecimal("200"));
        transaction.setType(TransactionType.DESPESA);
        transaction.setDate(LocalDate.of(2024, 11, 20));

        when(transactionRepository.findByCategoryAndUser(category, user)).thenReturn(List.of(transaction));

        String result = transactionService.addTransaction(transaction);

        assertNull(result);
        verify(transactionRepository, times(1)).save(transaction);
    }

    @Test
    void addTransacaoUltrapassaOrcamento() {
        User user = new User();
        Category category = new Category();
        category.setBudget(new BigDecimal("300"));
        category.setName("Transport");

        Transaction transaction = new Transaction();
        transaction.setUser(user);
        transaction.setCategory(category);
        transaction.setAmount(new BigDecimal("200"));
        transaction.setType(TransactionType.DESPESA);
        transaction.setDate(LocalDate.of(2024, 11, 20));

        Transaction pastTransaction = new Transaction();
        pastTransaction.setAmount(new BigDecimal("150"));
        pastTransaction.setType(TransactionType.DESPESA);
        pastTransaction.setDate(LocalDate.of(2024, 11, 10));

        when(transactionRepository.findByCategoryAndUser(category, user)).thenReturn(List.of(pastTransaction));

        String result = transactionService.addTransaction(transaction);

        assertEquals("O valor das transaÃ§Ãµes para a categoria Transport excedeu o orÃ§amento mensal.", result);
        verify(transactionRepository, times(1)).save(transaction);
    }

    @Test
    void deletaTransacaoPorIdUserAutorizado() {
        User user = new User();
        user.setId(1L);

        Transaction transaction = new Transaction();
        transaction.setId(1L);
        transaction.setUser(user);

        when(transactionRepository.findById(1L)).thenReturn(Optional.of(transaction));

        transactionService.deleteTransactionByIdAndUser(1L, user);

        verify(transactionRepository, times(1)).delete(transaction);
    }

    @Test
    void deletaTransacaoPorIdUserDesautorizado() {
        User user = new User();
        user.setId(1L);

        User otherUser = new User();
        otherUser.setId(2L);

        Transaction transaction = new Transaction();
        transaction.setId(1L);
        transaction.setUser(otherUser);

        when(transactionRepository.findById(1L)).thenReturn(Optional.of(transaction));

        assertThrows(AccessDeniedException.class, () -> transactionService.deleteTransactionByIdAndUser(1L, user));

        verify(transactionRepository, never()).delete(transaction);
    }


    @Test
    void getFinancasMensal() {
        User user = new User();
        user.setId(1L);

        Transaction t1 = new Transaction();
        t1.setUser(user);
        t1.setType(TransactionType.RECEITA);
        t1.setDate(LocalDate.of(2023, 10, 1));
        t1.setAmount(new BigDecimal("100"));

        Transaction t2 = new Transaction();
        t2.setUser(user);
        t2.setType(TransactionType.RECEITA);
        t2.setDate(LocalDate.of(2023, 11, 1));
        t2.setAmount(new BigDecimal("200"));

        Transaction t3 = new Transaction();
        t3.setUser(user);
        t3.setType(TransactionType.DESPESA);
        t3.setDate(LocalDate.of(2023, 11, 2));
        t3.setAmount(new BigDecimal("300"));

        when(transactionRepository.findByUser(user)).thenReturn(List.of(t1, t2, t3));
        Map<String, BigDecimal> summary = transactionService.getMonthlyFinancialSummary(user, 11, 2023);

        assertEquals(new BigDecimal("100"), summary.get("initialBalance")); 
        assertEquals(new BigDecimal("200"), summary.get("totalIncome"));    
        assertEquals(new BigDecimal("300"), summary.get("totalExpense"));   
        assertEquals(new BigDecimal("0"), summary.get("finalBalance"));     
    }

}


Arquivo: ./src/test/java/com/trabalho/controlefinancas/SecurityConfigTests.java
//package com.trabalho.controlefinancas;
//
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import static org.junit.jupiter.api.Assertions.assertTrue;
//import org.springframework.boot.test.context.SpringBootTest;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.test.context.support.WithMockUser;
//import org.springframework.test.web.servlet.MockMvc;
//import org.springframework.test.web.servlet.setup.MockMvcBuilders;
//import org.springframework.web.context.WebApplicationContext;
//
//import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.formLogin;
//import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.logout;
//import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;
//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
//
//@SpringBootTest
//class SecurityConfigTests {
//
//    private MockMvc mockMvc;
//
//    private final WebApplicationContext context;
//
//    public SecurityConfigTests(WebApplicationContext context) {
//        this.context = context;
//    }
//
//    @BeforeEach
//    void setUp() {
//        mockMvc = MockMvcBuilders.webAppContextSetup(context)
//                .apply(springSecurity())
//                .build();
//    }
//
//    @Test
//    @WithMockUser(username = "teste", roles = "USER")
//    void testAuthenticatedEndpointsRequireLogin() throws Exception {
//        mockMvc.perform(get("/transactions"))
//                .andExpect(status().isOk());
//    }
//
//    @Test
//    void testFormLogin() throws Exception {
//        mockMvc.perform(formLogin().user("teste").password("teste"))
//                .andExpect(status().is3xxRedirection())
//                .andExpect(redirectedUrl("/transactions"));
//    }
//
//    @Test
//    void testLogout() throws Exception {
//        mockMvc.perform(logout())
//                .andExpect(status().is3xxRedirection())
//                .andExpect(redirectedUrl("/"));
//    }
//
//    @Test
//    void testPasswordEncoder() {
//        PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
//        String rawPassword = "teste";
//        String encodedPassword = passwordEncoder.encode(rawPassword);
//
//        assertTrue(passwordEncoder.matches(rawPassword, encodedPassword));
//    }
//}

Arquivo: ./src/test/java/com/trabalho/controlefinancas/CategoryModelTests.java
package com.trabalho.controlefinancas;

import java.math.BigDecimal;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.trabalho.controlefinancas.model.Category;
import com.trabalho.controlefinancas.model.Transaction;
import com.trabalho.controlefinancas.model.User;

class CategoryModelTests {

    private Category category;

    @BeforeEach
    void setUp() {
        category = new Category("Food", "Expenses related to food", BigDecimal.valueOf(500.00));
    }

    @Test
    void construtorDefault() {
        Category defaultCategory = new Category();
        assertNull(defaultCategory.getName());
        assertNull(defaultCategory.getDescription());
        assertNull(defaultCategory.getBudget());
        assertNotNull(defaultCategory.getTransactions());
        assertTrue(defaultCategory.getTransactions().isEmpty());
    }

    @Test
    void construtorComNome() {
        Category nameOnlyCategory = new Category("Viagem");
        assertEquals("Viagem", nameOnlyCategory.getName());
        assertNull(nameOnlyCategory.getDescription());
        assertNull(nameOnlyCategory.getBudget());
    }

    @Test
    void construtorComNomeEOrcamento() {
        Category budgetCategory = new Category("Viagem", BigDecimal.valueOf(300.00));
        assertEquals("Viagem", budgetCategory.getName());
        assertNull(budgetCategory.getDescription());
        assertEquals(BigDecimal.valueOf(300.00), budgetCategory.getBudget());
    }

    @Test
    void construtorComNomeEDescricao() {
        Category descriptionCategory = new Category("Viagem", "Gastos com viagens");
        assertEquals("Viagem", descriptionCategory.getName());
        assertEquals("Gastos com viagens", descriptionCategory.getDescription());
        assertNull(descriptionCategory.getBudget());
    }

    @Test
    void construtorCompleto() {
        User user = new User();
        Category fullCategory = new Category("Viagem", "Gastos com viagens", BigDecimal.valueOf(300.00), user);

        assertEquals("Viagem", fullCategory.getName());
        assertEquals("Gastos com viagens", fullCategory.getDescription());
        assertEquals(BigDecimal.valueOf(300.00), fullCategory.getBudget());
        assertEquals(user, fullCategory.getUser());
    }

    @Test
    void testAddTransaction() {
        Transaction transaction = new Transaction();
        category.addTransaction(transaction);

        List<Transaction> transactions = category.getTransactions();
        assertEquals(1, transactions.size());
        assertTrue(transactions.contains(transaction));
        assertEquals(category, transaction.getCategory());
    }

    @Test
    void testRemoveTransaction() {
        Transaction transaction = new Transaction();
        category.addTransaction(transaction);
        category.removeTransaction(transaction);

        List<Transaction> transactions = category.getTransactions();
        assertTrue(transactions.isEmpty());
        assertNull(transaction.getCategory());
    }

    @Test
    void testSettersAndGetters() {
        category.setId(1L);
        category.setName("Entertainment");
        category.setDescription("Movies, games, etc.");
        category.setBudget(BigDecimal.valueOf(100.00));

        assertEquals(1L, category.getId());
        assertEquals("Entertainment", category.getName());
        assertEquals("Movies, games, etc.", category.getDescription());
        assertEquals(BigDecimal.valueOf(100.00), category.getBudget());
    }

    @Test
    void testTransactionListInitialization() {
        assertNotNull(category.getTransactions());
        assertTrue(category.getTransactions().isEmpty());
    }

    @Test
    void testUserAssociation() {
        User user = new User();
        category.setUser(user);

        assertEquals(user, category.getUser());
    }
}


Arquivo: ./src/test/java/com/trabalho/controlefinancas/UserModelTests.java
package com.trabalho.controlefinancas;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.trabalho.controlefinancas.model.User;
import com.trabalho.controlefinancas.model.UserRole;

class UserModelTests {

    private User user;


    @BeforeEach
    void setUp() {
        user = new User();
    }

    @Test
    void testSetAndGetRole() {
        user.setRole(UserRole.ROLE_ADMIN);
        assertEquals(UserRole.ROLE_ADMIN, user.getRole());

        user.setRole(UserRole.ROLE_USER);
        assertEquals(UserRole.ROLE_USER, user.getRole());
    }

    @Test
    void testSetAndIsEnabled() {
        user.setEnabled(true);
        assertTrue(user.isEnabled());

        user.setEnabled(false);
        assertFalse(user.isEnabled());
    }
}


Arquivo: ./src/test/java/com/trabalho/controlefinancas/CategoryControllerTests.java
package com.trabalho.controlefinancas;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import com.trabalho.controlefinancas.controller.CategoryController;
import com.trabalho.controlefinancas.service.CategoryService;

@WebMvcTest(CategoryController.class)
public class CategoryControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Test
    void contextLoads() {
        // Este teste irÃ¡ verificar se o contexto do Spring carrega corretamente
    }

    @MockBean
    private CategoryService categoryService;
}


